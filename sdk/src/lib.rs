#![allow(incomplete_features)]
#![feature(generic_const_exprs)]
pub mod proto {
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub mod network;
}
pub mod client;
mod io;
mod util;
pub mod utils {
    pub use sp1_core::utils::{
        setup_logger, setup_tracer, BabyBearBlake3, BabyBearKeccak, BabyBearPoseidon2,
    };
}
pub use crate::io::*;
use proto::network::ProofStatus;
use utils::*;

use crate::client::{NetworkClient, SP1_VERIFIER_ADDRESS};
use anyhow::{Context, Ok, Result};
use serde::de::DeserializeOwned;
use serde::{Deserialize, Serialize};
use sp1_core::runtime::{Program, Runtime};
use sp1_core::stark::{Com, PcsProverData, RiscvAir};
use sp1_core::stark::{
    OpeningProof, ProgramVerificationError, Proof, ShardMainData, StarkGenericConfig,
};
use sp1_core::utils::run_and_prove;
use std::env;
use std::fs;
use std::str::FromStr;
use std::time::Duration;
use tokio::time::sleep;
use util::StageProgressBar;

/// A prover that can prove RISCV ELFs.
pub struct SP1Prover;

/// A verifier that can verify proofs generated by `SP1Prover`.
pub struct SP1Verifier;

/// A proof of a RISCV ELF execution with given inputs and outputs.
#[derive(Serialize, Deserialize)]
pub struct SP1ProofWithIO<SC: StarkGenericConfig + Serialize + DeserializeOwned> {
    #[serde(with = "proof_serde")]
    pub proof: Proof<SC>,
    pub stdin: SP1Stdin,
    pub stdout: SP1Stdout,
}

impl SP1Prover {
    /// Executes the elf with the given inputs and returns the output.
    pub fn execute(elf: &[u8], stdin: SP1Stdin) -> Result<SP1Stdout> {
        let program = Program::from(elf);
        let mut runtime = Runtime::new(program);
        runtime.write_stdin_slice(&stdin.buffer.data);
        runtime.run();
        Ok(SP1Stdout::from(&runtime.state.output_stream))
    }

    /// Generate a proof for the execution of the ELF with the given public inputs.
    pub fn prove(elf: &[u8], stdin: SP1Stdin) -> Result<SP1ProofWithIO<BabyBearPoseidon2>> {
        Self::prove_with_config(elf, stdin, BabyBearPoseidon2::new())
    }

    async fn prove_remote<SC: StarkGenericConfig>(
        elf: &[u8],
        stdin: SP1Stdin,
    ) -> Result<(SP1ProofWithIO<SC>, Option<String>)>
    where
        SC: StarkGenericConfig,
        SC::Challenger: Clone,
        OpeningProof<SC>: Send + Sync,
        Com<SC>: Send + Sync,
        PcsProverData<SC>: Send + Sync,
        ShardMainData<SC>: Serialize + DeserializeOwned,
        SC::Val: p3_field::PrimeField32,
    {
        let access_token = std::env::var("PROVER_NETWORK_ACCESS_TOKEN").unwrap();
        let client = NetworkClient::with_token(access_token);
        let id = client.create_proof(elf, &stdin.buffer.data).await?;

        let mut pb = StageProgressBar::new();
        loop {
            let status = client.get_proof_status(&id).await;
            match status {
                std::result::Result::Ok(status) => {
                    if status.0.status() == ProofStatus::ProofFailed {
                        pb.finish();
                        return Err(anyhow::anyhow!("Proof failed"));
                    }
                    if let Some(result) = status.1 {
                        println!("Proof succeeded\n\n");
                        pb.finish();
                        return Ok((result, Some(id)));
                    }
                    pb.update(
                        status.0.stage,
                        status.0.total_stages,
                        &status.0.stage_name,
                        status.0.stage_progress.map(|p| (p, status.0.stage_total())),
                    );
                }
                Err(e) => {
                    pb.finish();
                    return Err(e);
                }
            }
            sleep(Duration::from_secs(1)).await;
        }
    }

    async fn broadcast_proof(
        access_token: String,
        proof_id: &str,
        chain_ids: Vec<u32>,
        callbacks: Vec<&str>,
        callback_datas: Vec<&str>,
    ) -> Result<Vec<String>> {
        let client = NetworkClient::with_token(access_token);
        let verifier = SP1_VERIFIER_ADDRESS;

        let mut tx_ids = Vec::new();
        for ((i, &callback), &callback_data) in
            callbacks.iter().enumerate().zip(callback_datas.iter())
        {
            if let Some(&chain_id) = chain_ids.get(i) {
                let tx_id = client
                    .broadcast_proof(proof_id, chain_id, verifier, callback, callback_data)
                    .await
                    .with_context(|| format!("Failed to broadcast proof to chain {}", chain_id))?;
                tx_ids.push(tx_id);
            }
        }
        Ok(tx_ids)
    }

    /// Generate a proof for the execution of the ELF with the given public inputs and a custom config.
    pub fn prove_with_config<SC: StarkGenericConfig>(
        elf: &[u8],
        stdin: SP1Stdin,
        config: SC,
    ) -> Result<SP1ProofWithIO<SC>>
    where
        SC: StarkGenericConfig,
        SC::Challenger: Clone,
        OpeningProof<SC>: Send + Sync,
        Com<SC>: Send + Sync,
        PcsProverData<SC>: Send + Sync,
        ShardMainData<SC>: Serialize + DeserializeOwned,
        SC::Val: p3_field::PrimeField32,
    {
        // If PROVER_NETWORK_ACCESS_TOKEN is set, prove remotely
        if std::env::var("PROVER_NETWORK_ACCESS_TOKEN").is_ok() {
            log::info!("PROVER_NETWORK_ACCESS_TOKEN is set, proving remotely");
            let proof_result = match tokio::runtime::Handle::try_current() {
                std::result::Result::Ok(handle) => tokio::task::block_in_place(|| {
                    handle.block_on(async { Self::prove_remote(elf, stdin).await })
                }),
                Err(_) => {
                    let rt = tokio::runtime::Runtime::new()?;
                    rt.block_on(async { Self::prove_remote(elf, stdin).await })
                }
            };

            match proof_result {
                std::result::Result::Ok((proof_with_io, proof_id)) => {
                    if let std::result::Result::Ok(chains_env) = std::env::var("CHAINS") {
                        if !chains_env.is_empty() {
                            log::info!("CHAINS is set, proving on-chain");
                            let access_token =
                                std::env::var("PROVER_NETWORK_ACCESS_TOKEN").unwrap();
                            let chain_ids: Vec<u32> = Self::parse_env_var_array("CHAINS")?;
                            let callbacks: Vec<String> = Self::parse_env_var_array("CALLBACKS")?;
                            let callback_datas: Vec<String> =
                                Self::parse_env_var_array("CALLBACK_DATAS")?;

                            if !(chain_ids.len() == callbacks.len()
                                && callbacks.len() == callback_datas.len())
                            {
                                return Err(anyhow::anyhow!("CHAINS, CALLBACKS, and CALLBACK_DATAS must be of the same size"));
                            }

                            let callbacks_refs: Vec<&str> =
                                callbacks.iter().map(AsRef::as_ref).collect();
                            let callback_datas_refs: Vec<&str> =
                                callback_datas.iter().map(AsRef::as_ref).collect();

                            let rt = tokio::runtime::Runtime::new()?;
                            if let Some(proof_id_str) = proof_id {
                                match rt.block_on(async {
                                    Self::broadcast_proof(
                                        access_token,
                                        &proof_id_str,
                                        chain_ids,
                                        callbacks_refs,
                                        callback_datas_refs,
                                    )
                                    .await
                                }) {
                                    std::result::Result::Ok(tx_ids) => {
                                        log::info!("Proofs broadcasted successfully: {:?}", tx_ids);
                                        Ok(proof_with_io)
                                    }
                                    Err(e) => {
                                        log::error!("Failed to broadcast transactions: {:?}", e);
                                        return Err(anyhow::anyhow!("broadcast_proof failed"));
                                    }
                                }
                            } else {
                                log::error!("Proof ID is not available");
                                return Err(anyhow::anyhow!("Proof ID is not available"));
                            }
                        } else {
                            log::info!("CHAINS is not set, returning proof");
                            Ok(proof_with_io)
                        }
                    } else {
                        log::info!("CHAINS is not set, returning proof");
                        Ok(proof_with_io)
                    }
                }
                std::result::Result::Err(e) => {
                    log::error!("Failed to prove remotely: {:?}", e);
                    return Err(anyhow::anyhow!("prove_remote failed"));
                }
            }
        } else {
            let program = Program::from(elf);
            let (proof, stdout_vec) = run_and_prove(program, &stdin.buffer.data, config);
            let stdout = SP1Stdout::from(&stdout_vec);
            Ok(SP1ProofWithIO {
                proof,
                stdin,
                stdout,
            })
        }
    }

    /// Return a comma separated list of values from the given environment variable.
    fn parse_env_var_array<T: FromStr>(env_var: &str) -> Result<Vec<T>> {
        let var_value = env::var(env_var)
            .with_context(|| format!("{} environment variable not set", env_var))?;

        var_value
            .split(',')
            .map(|s| s.trim())
            .filter(|s| !s.is_empty())
            .map(|s| s.parse::<T>())
            .collect::<Result<Vec<T>, T::Err>>()
            .map_err(|_| anyhow::anyhow!("Failed to parse one or more values in {}", env_var))
    }
}

impl SP1Verifier {
    /// Verify a proof generated by `SP1Prover`.
    #[allow(unused_variables)]
    pub fn verify(
        elf: &[u8],
        proof: &SP1ProofWithIO<BabyBearPoseidon2>,
    ) -> Result<(), ProgramVerificationError> {
        Self::verify_with_config(elf, proof, BabyBearPoseidon2::new())
    }

    /// Verify a proof generated by `SP1Prover` with a custom config.
    #[allow(unused_variables)]
    pub fn verify_with_config<SC: StarkGenericConfig>(
        elf: &[u8],
        proof: &SP1ProofWithIO<SC>,
        config: SC,
    ) -> Result<(), ProgramVerificationError>
    where
        SC: StarkGenericConfig,
        SC::Challenger: Clone,
        OpeningProof<SC>: Send + Sync,
        Com<SC>: Send + Sync,
        PcsProverData<SC>: Send + Sync,
        ShardMainData<SC>: Serialize + DeserializeOwned,
        SC::Val: p3_field::PrimeField32,
    {
        let mut challenger = config.challenger();
        let machine = RiscvAir::machine(config);

        let (_, vk) = machine.setup(&Program::from(elf));
        machine.verify(&vk, &proof.proof, &mut challenger)
    }
}

impl<SC: StarkGenericConfig + Serialize + DeserializeOwned> SP1ProofWithIO<SC> {
    /// Saves the proof as a JSON to the given path.
    pub fn save(&self, path: &str) -> Result<()> {
        let data = serde_json::to_string(self).unwrap();
        fs::write(path, data).unwrap();
        Ok(())
    }
}
